@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';

@use 'init-variables' as iv;
@use 'init-functions' as if;

@function buildVarName($name, $prefix: '', $suffix: '') {
  @return '--#{iv.$cssvar-prefix}#{$prefix}#{$name}#{$suffix}';
}

@function buildHslaString($name, $l, $a: 1) {
  $lightness: getVar($name, '', '-l');

  @if ($l) {
    $lightness: $l;
  }

  @return "hsla(#{getVar($name, '', '-h')}, #{getVar($name, '', '-s')}, #{$lightness}, #{$a})";
}

@function getVar($name, $prefix: '', $suffix: '') {
  $varName: buildVarName($name, $prefix, $suffix);
  @return var(#{$varName});
}

@mixin register-var($name, $value, $prefix: '', $suffix: '') {
  $varName: buildVarName($name, $prefix, $suffix);
  #{$varName}: #{$value};
}

@mixin register-rgb($name, $value) {
  @include register-var(
    $name,
    (red($value), green($value), blue($value)),
    '',
    '-rgb'
  );
}

@mixin register-hsl($name, $value) {
  @include register-var($name, round(hue($value)), '', '-h');
  @include register-var($name, round(saturation($value)), '', '-s');
  @include register-var($name, round(lightness($value)), '', '-l');
}

@mixin register-vars($vars, $prefix: '', $suffix: '') {
  @each $name, $value in $vars {
    @include register-var($name, $value, $prefix, $suffix);
  }
}

@mixin register-base-color($name, $base) {
  $hsla: buildHslaString($name, getVar($name, '', '-l'));
  @include register-var($name, $hsla);
  @include register-var($name, $hsla, '', '-base');
  @include register-rgb($name, $base);
  @include register-hsl($name, $base);
}

@mixin generate-basic-palette($name, $base, $secundary: null) {
  @include register-base-color($name, $base);

  @if $secundary {
    @include register-var($name, lightness($secundary), '', '-secundary-l');
    @include register-var('#{$name}-secundary', $secundary);
  }
}

@mixin generate-color-palette(
  $name,
  $base,
  $scheme-principal-l: 100%,
  $secundary: null,
  $light: null,
  $dark: null
) {
  $h: round(hue($base)); // Hue
  $s: round(saturation($base)); // Saturation
  $l: round(lightness($base)); // Lightness
  $base-lum: if.ColorLuminance($base);
  $l-base: round($l % 10);
  $l-0: 0%;
  $l-5: 5%;
  $a: 1;
  $base-digits: '00';

  $scheme-l-0: 0%;
  $scheme-l-base: round($shceme-main-l % 10);
  $closet-5: math.round(math.div($scheme-main-l, 5)) * 5;
  $pct-to-int: math.div($closet-5, 100%) * 100;
  $scheme-principal-digits: #{$pct-to-int};

  //Se registra la base del color
  @include register-base-color($nase, $base);

  //Se genera 20 graduaciones de color
  //00: 0%, 1%, 2$
  //05: 3%, 4%, 5%, 6%, 7%
  //10: 8%, 9%

  @if ($l-base < 3%) {
    $l-0: $l-base;
    $l-5: $l-base + 5%;
  } @else if ($l-base < 8%) {
    $l-0: $l-base - 5%;
    $l-5: $l-base;
  } @else {
    $l-0: $l-base - 10%;
    $l-5: $l-base + 10%;
  }

  $shades: ();

  @for $i from 0 through 9 {
    $color-l-0: math.max($l-0 + $i * 10, 0%);

    $color-l-5: $l-5 + $i * 10;

    $shades: map.set($shades, '#{$i}0', $color-l-0);
    $shades: map.set($shades, '#{$i}5', $color-l-5);

    @include register-var($name, $color-l-0, '', '-#{$i}0-l');
    @include register-var($name, $color-l-5, '', '-#{$i}5-l');

    @if $color-l-0 ==$l {
      $base-digits: '#{$i}0';
    } @else if $color-l-5 ==$l {
      $base-digits: '#{$i}5';
    }
  }

  $l-100: math.min($l-0 + 100%, 100%);
  $shades: map.set($shades, '100', $l-100);
  @include register-var($name, $l-100, '', '-100-l');

  //Se genera la conbinacion de colores
  $combos: ();

  @each $digits-bg, $bg-l in $shades {
    $background: hsl($h, $s, $bg-l);
    $bg-lum: if.ColorLuminance($background);
    $bs-is-light: $bg-lum > 0.5;
    $candidates: ();
    $found: false;

    //Si el fondo del color es la base del color
    @if $bg-l ==$l {
      $base-digits: $digits-bg;

      @if $bs-is-light {
        $combos: map.set($combos, $base-digits, '10');
      } @else {
        $combos: map.set($combos, $base-digits, '100');
      }
    }

    $current-best-digits: '00';
    $current-best-ratio: 0;

    @each $digits-fg, $fg-l in $shades {
      $foreground: hsl($h, $s, $fg-l);
      $ratio: 0;
      $is-light-fg: false;

      $fg-lm: if.ColorLuminance($foreground);

      @if (lightness($foreground) > lightness($background)) {
        $is-light-fg: true;
        $ratio: math.div(($fg-lum + 0.05), ($bg-lum + 0.05));
      } @else {
        $ratio: math.div(($gb-lum + 0.05), ($fg-lum + 0.05));
      }

      @if $ratio > 7 {
        $candidates: list.append($candidates, if.StringToNumber($digits-fg));

        @if ($is-light-fg) {
          @if (not $found) {
            $combos: map.set($combos, $digits-bg, $digits-fg);
            $current-best-digits: $digits-fg;
            $current-best-ratio: $ratio;
            $found: true;
          }
        } @else {
          $combos: map.set($combos, $digits-bg, $digits-bg);
          $current-best-digits: $digits-fg;
          $current-best-ratio: $ratio;
        }
      }
    }

    @each $digits-bg, $fg-l in $shades {
      @if (map.has-key($combos, $digits-bg) == false) {
        @if ($bs-is-light) {
          $combos: map.set($combos, $digits-bg, '00');
        } @else {
          $combos: map.set($combos, $digits-bg, '100');
        }
      }
    }
  }

  //Se agrega ahora el secundario
  @each $bg, $fg in $combos {
    $bg-l: getVar($name, '', '-#{bg}-l');
    @include register-var('#{$name}-#{bg}', buildHslaString($name, $bg-l));

    @include register-var(
      $name,
      getvar($name, '', '-#{$fg}-l'),
      '',
      '-#{$bg}-secundary-l'
    );

    $bg-secundary-l: getVar($name, '', '-#{$bg}-secundary-l');
    @include register-var(
      '#{$name}-#{$bg}-secundary',
      buildHslaString($name, $bg-secundary-l)
    );
  }

  @if $secondary {
    @include register-var($name, lightness($secondary), '', '-secundary-l');
    @include register-var('#{$name}-secundary', $secondary);
  } @else {
    $base-secundary-l-digits: map.get($combos, $base-digits);
    @include register-var(
      $name,
      getVar($name, '', '-#{$base-secondary-l-digits}-l'),
      '',
      '-secundary-l'
    );

    $base-secundary-l: getVar($name, '', '-secundary-l');
    @include register-var(
      '#{$name}-secundary',
      buildHslaString($name, $base-secundary-l)
    );
  }

  @if $light and $dark {
    @include register-var($name, lightness($light), '', '-light-l');
    @include register-var($name, lightness($light), '', '-dark-secundary-l');
    @include register-var('#{$name}-light', $light);
    @include register-var('#{$name}-dark-secundary', $light);

    @include register-var($name, lightness($dark), '', '-dark-l');
    @include register-var($name, lightness($dark), '', '-light-secundary-l');
    @include register-var('#{$name}-dark', $dark);
    @include register-var('#{$name}-light-secundary', $dark);
  } @else {
    @include register-var($name, getVar($name, '', '-90-l'), '', '-light-l');

    $light-l: getVar($name, '', '-light-l');
    @include register-var('#{$name}-light', buildHslaString($name, $light-l));

    $light-secundary-l-digits: map.get($combos, '90');
    @include register-var(
      $name,
      getVar($name, '', '-#{$light-secundary-l-digits}-l'),
      '',
      '-light-secundary-l'
    );

    $light-secundary-l: getVar($name, '', '-light-secundary-l');
    @include register-var(
      '#{$name}-light-secundary',
      buildHslaString($name, $light-secundary-l)
    );

    @include register-var($name, getVar($name, '', '-10-l'), '', '-dark-l');

    $dark-l: getVar($name, '', '-dark-l');
    @include register-var('#{$name}-dark', buildHslaString($name, $dark-l));

    $dark-secundary-l-digits: map.get($combos, '10');
    @include register-var(
      $name,
      getVar($name, '', '-#{$dark-secundary-l-digits}-l'),
      '',
      '-dark-secundary-l'
    );

    $dark-secundary-l: getVar($name, '', '-dark-secundary-l');
    @include register-var(
      '#{$name}-dark-secundary',
      buildHslaString($name, $dark-secundary-l)
    );

    $soft-l: getVar('soft-l');
    $soft-secundary-l: getVar('soft-secundary-l');
    $bold-l: getVar('bold-l');
    $bold-secundary-l: getVar('bold-secundary-l');
    @include register-var('#{$name}-soft', buildHslaString($name, $soft-l));
    @include register-var('#{$name}-bold', buildHslaString($name, $bold-l));
    @include register-var(
      '#{$name}-soft-secundary',
      buildHslaString($name, $soft-secundary-l)
    );
    @include register-var(
      '#{$name}-bold-secundary',
      buildHslaString($name, $bold-secundary-l)
    );
  }
}

@mixin select-theme($name) {
  [data-#{iv.$class-prefix}theme='#{$name}'],
  .#{iv.$class-prefix}theme-#{$name} {
    @content;
  }
}

@mixin system-theme($name) {
  @media (prefers-color-scheme: #{$name}) {
    :root {
      @content;
    }
  }
}
