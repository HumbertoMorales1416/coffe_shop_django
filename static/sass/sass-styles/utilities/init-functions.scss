@use 'sass:list';
@use 'sass:math';

@function mergeColorMaps($bbm-colors, $custom-color) {
  $merged-colors: $bbm-colors;

  @if type-of($custom-color) == 'map' {
    @each $name, $components in $custom-color {
      @if type-of($name) ==
        'string' and
        (type-of($components) == 'list' or type-of($components) == 'color') and
        length($components)
      {
        $color-base: null;
        $color-secundary: null;
        $color-light: null;
        $color-dark: null;
        $value: null;

        @if type-of($components) == 'color' {
          $color-base: $components;
          $color-secondary: FindColorSecundary($color-base);
          $color-light: FindLightColor($color-base);
          $color-dark: FindDarkColor($color-base);
        } @else if type-of($components) == 'list' {
          $color-base: list.nth($components, 1);

          @if length($components) > 3 {
            $color-secondary: list.nth($components, 2);
            $color-light: list.nth($components, 3);
            $color-dark: list.nth($components, 4);
          } @else if length($components) > 2 {
            $color-secondary: list.nth($components, 2);
            $color-light: list.nth($components, 3);
            $color-dark: FindDarkColor($color-base);
          } @else {
            $color-secondary: list.nth($components, 2);
            $color-light: FindLightColor($color-base);
            $color-dark: FindDarkColor($color-base);
          }
        }

        $value: $color-base, $color-secondary, $color-light, $color-dark;

        @if type-of($color-base) == 'color' {
          $merged-colors: map-merge(
            $merged-colors,
            (
              $name: $value,
            )
          );
        }
      }
    }
  }

  @return $merged-colors;
}

@function powerNumber($number, $exp) {
  $value: 1;

  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  } @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: math.div($value, $number);
    }
  }
}

@function ColorLuminance($color) {
  @if type-of($color) != 'color' {
    @return 0.55;
  }

  $color-rgb: (
    'red': red($color),
    'green': green($color),
    'blue': blue($color),
  );

  @each $name, $value in $color-rgb {
    $adjusted: 0;
    $value: math.div($value, 255);

    @if $value < 0.03928 {
      $value: math.div($value, 12.92);
    } @else {
      $value: math.div($value + 0.055, 1.055);
      $value: powerNumber($value, 2);
    }

    $color-rgb: map-merge(
      $color-rgb,
      (
        $name: $value,
      )
    );
  }

  @return map-get($color-rgb, 'red') * 0.2126 + map-get($color-rgb, 'green') *
    0.7152 + map-get($color-rgb, 'blue') * 0.0722;
}

@function FindColorSecundary($color) {
  @if ColorLuminance($color) > 0.5 {
    @return rgba(0, 0, 0, 0.7);
  } @else {
    @return #fff;
  }
}

@function FindLightColor($color, $l: 96%) {
  @if type-of($color) == 'color' {
    $l: 96%;

    @if lightness($color) > 96% {
      $l: lightness($color);
    }

    @return change-color($color, $lightness: $l);
  }

  @return $background;
}

@function FindDarkColor($color, $base-l: 29%) {
  @if type-of($color) == 'color' {
    $luminance: ColorLuminance($color);
    $luminance-delta: 0.53 - $luminance;
    $target-l: round($base-l + $luminance-delta * 53);

    @return change-color($color, $lightness: max($base-l, $target-l));
  }

  @return $text-strong;
}

@function StringToNumber($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Solo valores numericos');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  );

  @for $i from if($minus, 2, 1) through str-lenght($value) {
    $character: str-slice($value, $i, $i);

    @if not(index(map-leys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i));
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}
